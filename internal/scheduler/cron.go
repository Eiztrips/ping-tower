package scheduler

import (
	"context"
	"fmt"
	"log"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"
)

// CronScheduler - –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –≤ —Å—Ç–∏–ª–µ cron
type CronScheduler struct {
	jobs     map[string]*Job
	jobsMux  sync.RWMutex
	running  bool
	stopChan chan struct{}
	wg       sync.WaitGroup
}

// Job - –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
type Job struct {
	ID          string
	Name        string
	Schedule    *Schedule
	Handler     func() error
	LastRun     time.Time
	NextRun     time.Time
	Running     bool
	Enabled     bool
	ErrorCount  int
	LastError   error
	RunCount    int
	mutex       sync.Mutex
}

// Schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ cron —Ñ–æ—Ä–º–∞—Ç–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
type Schedule struct {
	Minutes  []int // 0-59
	Hours    []int // 0-23
	Days     []int // 1-31
	Months   []int // 1-12
	Weekdays []int // 0-6 (0=Sunday)
}

// NewCronScheduler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
func NewCronScheduler() *CronScheduler {
	return &CronScheduler{
		jobs:     make(map[string]*Job),
		stopChan: make(chan struct{}),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
func (cs *CronScheduler) Start() error {
	cs.jobsMux.Lock()
	defer cs.jobsMux.Unlock()

	if cs.running {
		return fmt.Errorf("scheduler already running")
	}

	cs.running = true
	cs.stopChan = make(chan struct{})

	cs.wg.Add(1)
	go cs.runLoop()

	log.Println("üïê Cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
func (cs *CronScheduler) Stop() {
	cs.jobsMux.Lock()
	if !cs.running {
		cs.jobsMux.Unlock()
		return
	}
	cs.running = false
	cs.jobsMux.Unlock()

	close(cs.stopChan)
	cs.wg.Wait()

	log.Println("üõë Cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// AddJob –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
func (cs *CronScheduler) AddJob(id, name, cronExpr string, handler func() error) error {
	schedule, err := ParseCronExpression(cronExpr)
	if err != nil {
		return fmt.Errorf("invalid cron expression: %w", err)
	}

	job := &Job{
		ID:       id,
		Name:     name,
		Schedule: schedule,
		Handler:  handler,
		Enabled:  true,
	}

	job.NextRun = cs.calculateNextRun(job.Schedule, time.Now())

	cs.jobsMux.Lock()
	cs.jobs[id] = job
	cs.jobsMux.Unlock()

	log.Printf("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ '%s' (%s) —Å–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: %s", name, id, cronExpr)
	log.Printf("üïí –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: %s", job.NextRun.Format("2006-01-02 15:04:05"))

	return nil
}

// RemoveJob —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
func (cs *CronScheduler) RemoveJob(id string) {
	cs.jobsMux.Lock()
	defer cs.jobsMux.Unlock()

	if job, exists := cs.jobs[id]; exists {
		delete(cs.jobs, id)
		log.Printf("‚ûñ –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ '%s' (%s)", job.Name, id)
	}
}

// EnableJob –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
func (cs *CronScheduler) EnableJob(id string) error {
	cs.jobsMux.Lock()
	defer cs.jobsMux.Unlock()

	job, exists := cs.jobs[id]
	if !exists {
		return fmt.Errorf("job not found: %s", id)
	}

	job.Enabled = true
	job.NextRun = cs.calculateNextRun(job.Schedule, time.Now())
	log.Printf("‚úÖ –ó–∞–¥–∞–Ω–∏–µ '%s' –≤–∫–ª—é—á–µ–Ω–æ", job.Name)
	return nil
}

// DisableJob –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
func (cs *CronScheduler) DisableJob(id string) error {
	cs.jobsMux.Lock()
	defer cs.jobsMux.Unlock()

	job, exists := cs.jobs[id]
	if !exists {
		return fmt.Errorf("job not found: %s", id)
	}

	job.Enabled = false
	log.Printf("‚ùå –ó–∞–¥–∞–Ω–∏–µ '%s' –æ—Ç–∫–ª—é—á–µ–Ω–æ", job.Name)
	return nil
}

// GetJobs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
func (cs *CronScheduler) GetJobs() map[string]*Job {
	cs.jobsMux.RLock()
	defer cs.jobsMux.RUnlock()

	result := make(map[string]*Job)
	for id, job := range cs.jobs {
		// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		jobCopy := *job
		result[id] = &jobCopy
	}

	return result
}

// runLoop –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
func (cs *CronScheduler) runLoop() {
	defer cs.wg.Done()

	ticker := time.NewTicker(1 * time.Second) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
	defer ticker.Stop()

	log.Println("üîÑ –ó–∞–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

	for {
		select {
		case <-cs.stopChan:
			return
		case now := <-ticker.C:
			cs.checkAndRunJobs(now)
		}
	}
}

// checkAndRunJobs –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
func (cs *CronScheduler) checkAndRunJobs(now time.Time) {
	cs.jobsMux.RLock()
	var jobsToRun []*Job

	for _, job := range cs.jobs {
		if job.Enabled && !job.Running && now.After(job.NextRun) {
			jobsToRun = append(jobsToRun, job)
		}
	}
	cs.jobsMux.RUnlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	for _, job := range jobsToRun {
		go cs.runJob(job, now)
	}
}

// runJob –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
func (cs *CronScheduler) runJob(job *Job, now time.Time) {
	job.mutex.Lock()
	if job.Running {
		job.mutex.Unlock()
		return
	}

	job.Running = true
	job.LastRun = now
	job.RunCount++
	job.mutex.Unlock()

	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è '%s' (%s)", job.Name, job.ID)
	startTime := time.Now()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Minute)
	defer cancel()

	done := make(chan error, 1)
	go func() {
		done <- job.Handler()
	}()

	var err error
	select {
	case err = <-done:
	case <-ctx.Done():
		err = fmt.Errorf("job timeout after 30 minutes")
	}

	duration := time.Since(startTime)

	job.mutex.Lock()
	job.Running = false
	job.LastError = err
	if err != nil {
		job.ErrorCount++
		log.Printf("‚ùå –ó–∞–¥–∞–Ω–∏–µ '%s' –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π –∑–∞ %v: %v", job.Name, duration, err)
	} else {
		log.Printf("‚úÖ –ó–∞–¥–∞–Ω–∏–µ '%s' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ %v", job.Name, duration)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
	job.NextRun = cs.calculateNextRun(job.Schedule, now)
	log.Printf("üïí –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è '%s': %s", job.Name, job.NextRun.Format("2006-01-02 15:04:05"))
	job.mutex.Unlock()
}

// calculateNextRun –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
func (cs *CronScheduler) calculateNextRun(schedule *Schedule, from time.Time) time.Time {
	// –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
	next := from.Add(time.Minute).Truncate(time.Minute)

	// –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞
	for i := 0; i < 366*24*60; i++ { // –ú–∞–∫—Å–∏–º—É–º –≥–æ–¥ –ø–æ–∏—Å–∫–∞
		if cs.matchesSchedule(schedule, next) {
			return next
		}
		next = next.Add(time.Minute)
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥
	return from.Add(365 * 24 * time.Hour)
}

// matchesSchedule –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
func (cs *CronScheduler) matchesSchedule(schedule *Schedule, t time.Time) bool {
	minute := t.Minute()
	hour := t.Hour()
	day := t.Day()
	month := int(t.Month())
	weekday := int(t.Weekday())

	if len(schedule.Minutes) > 0 && !contains(schedule.Minutes, minute) {
		return false
	}
	if len(schedule.Hours) > 0 && !contains(schedule.Hours, hour) {
		return false
	}
	if len(schedule.Days) > 0 && !contains(schedule.Days, day) {
		return false
	}
	if len(schedule.Months) > 0 && !contains(schedule.Months, month) {
		return false
	}
	if len(schedule.Weekdays) > 0 && !contains(schedule.Weekdays, weekday) {
		return false
	}

	return true
}

// ParseCronExpression –ø–∞—Ä—Å–∏—Ç cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
// –§–æ—Ä–º–∞—Ç: "–º–∏–Ω—É—Ç—ã —á–∞—Å—ã –¥–Ω–∏ –º–µ—Å—è—Ü—ã –¥–Ω–∏_–Ω–µ–¥–µ–ª–∏"
// –ü—Ä–∏–º–µ—Ä: "*/5 * * * *" - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
// –ü—Ä–∏–º–µ—Ä: "0 9-17 * * 1-5" - –∫–∞–∂–¥—ã–π —á–∞—Å —Å 9 –¥–æ 17 –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏
func ParseCronExpression(expr string) (*Schedule, error) {
	parts := strings.Fields(expr)
	if len(parts) != 5 {
		return nil, fmt.Errorf("cron expression must have 5 parts, got %d", len(parts))
	}

	schedule := &Schedule{}
	var err error

	// –ú–∏–Ω—É—Ç—ã (0-59)
	schedule.Minutes, err = parseField(parts[0], 0, 59)
	if err != nil {
		return nil, fmt.Errorf("invalid minutes: %w", err)
	}

	// –ß–∞—Å—ã (0-23)
	schedule.Hours, err = parseField(parts[1], 0, 23)
	if err != nil {
		return nil, fmt.Errorf("invalid hours: %w", err)
	}

	// –î–Ω–∏ (1-31)
	schedule.Days, err = parseField(parts[2], 1, 31)
	if err != nil {
		return nil, fmt.Errorf("invalid days: %w", err)
	}

	// –ú–µ—Å—è—Ü—ã (1-12)
	schedule.Months, err = parseField(parts[3], 1, 12)
	if err != nil {
		return nil, fmt.Errorf("invalid months: %w", err)
	}

	// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (0-6)
	schedule.Weekdays, err = parseField(parts[4], 0, 6)
	if err != nil {
		return nil, fmt.Errorf("invalid weekdays: %w", err)
	}

	return schedule, nil
}

// parseField –ø–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
func parseField(field string, min, max int) ([]int, error) {
	if field == "*" {
		return nil, nil // nil –æ–∑–Ω–∞—á–∞–µ—Ç "–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è"
	}

	var values []int

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
	parts := strings.Split(field, ",")
	for _, part := range parts {
		if strings.Contains(part, "/") {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ step values (–Ω–∞–ø—Ä–∏–º–µ—Ä, */5)
			stepParts := strings.Split(part, "/")
			if len(stepParts) != 2 {
				return nil, fmt.Errorf("invalid step format: %s", part)
			}

			var start, end int
			if stepParts[0] == "*" {
				start, end = min, max
			} else if strings.Contains(stepParts[0], "-") {
				rangeParts := strings.Split(stepParts[0], "-")
				if len(rangeParts) != 2 {
					return nil, fmt.Errorf("invalid range format: %s", stepParts[0])
				}
				var err error
				start, err = strconv.Atoi(rangeParts[0])
				if err != nil {
					return nil, err
				}
				end, err = strconv.Atoi(rangeParts[1])
				if err != nil {
					return nil, err
				}
			} else {
				var err error
				start, err = strconv.Atoi(stepParts[0])
				if err != nil {
					return nil, err
				}
				end = max
			}

			step, err := strconv.Atoi(stepParts[1])
			if err != nil {
				return nil, err
			}

			for i := start; i <= end; i += step {
				if i >= min && i <= max {
					values = append(values, i)
				}
			}
		} else if strings.Contains(part, "-") {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9-17)
			rangeParts := strings.Split(part, "-")
			if len(rangeParts) != 2 {
				return nil, fmt.Errorf("invalid range format: %s", part)
			}

			start, err := strconv.Atoi(rangeParts[0])
			if err != nil {
				return nil, err
			}
			end, err := strconv.Atoi(rangeParts[1])
			if err != nil {
				return nil, err
			}

			for i := start; i <= end; i++ {
				if i >= min && i <= max {
					values = append(values, i)
				}
			}
		} else {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
			value, err := strconv.Atoi(part)
			if err != nil {
				return nil, err
			}
			if value >= min && value <= max {
				values = append(values, value)
			}
		}
	}

	// –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
	values = removeDuplicates(values)
	sort.Ints(values)

	return values, nil
}

// GetJobStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
func (cs *CronScheduler) GetJobStatus(id string) map[string]interface{} {
	cs.jobsMux.RLock()
	defer cs.jobsMux.RUnlock()

	job, exists := cs.jobs[id]
	if !exists {
		return map[string]interface{}{"error": "job not found"}
	}

	job.mutex.Lock()
	defer job.mutex.Unlock()

	status := map[string]interface{}{
		"id":         job.ID,
		"name":       job.Name,
		"enabled":    job.Enabled,
		"running":    job.Running,
		"run_count":  job.RunCount,
		"error_count": job.ErrorCount,
		"next_run":   job.NextRun.Format("2006-01-02 15:04:05"),
	}

	if !job.LastRun.IsZero() {
		status["last_run"] = job.LastRun.Format("2006-01-02 15:04:05")
	}

	if job.LastError != nil {
		status["last_error"] = job.LastError.Error()
	}

	return status
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

func contains(slice []int, value int) bool {
	for _, v := range slice {
		if v == value {
			return true
		}
	}
	return false
}

func removeDuplicates(slice []int) []int {
	keys := make(map[int]bool)
	var result []int

	for _, item := range slice {
		if !keys[item] {
			keys[item] = true
			result = append(result, item)
		}
	}

	return result
}
