package monitor

import (
	"crypto/tls"
	"database/sql"
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	"net/url"
	"strings"
	"time"

	"site-monitor/internal/models"
	_ "github.com/lib/pq"
)

type Checker struct {
	db       *sql.DB
	interval time.Duration
	client   *http.Client
}

type CheckResult struct {
	Status        string
	StatusCode    int
	ResponseTime  int64
	ContentLength int64
	SSLValid      bool
	SSLExpiry     *time.Time
	Error         string
}

func NewChecker(db *sql.DB, interval time.Duration) *Checker {
	client := &http.Client{
		Timeout: 30 * time.Second,
		Transport: &http.Transport{
			DialContext: (&net.Dialer{
				Timeout: 10 * time.Second,
			}).DialContext,
			TLSHandshakeTimeout: 10 * time.Second,
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: false,
			},
		},
	}

	return &Checker{
		db:       db,
		interval: interval,
		client:   client,
	}
}

func (c *Checker) Start() {
	log.Println("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤...")
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
	log.Println("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤...")
	c.checkAllSites()
	
	ticker := time.NewTicker(c.interval)
	defer ticker.Stop()
	
	log.Printf("‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", c.interval)

	for {
		select {
		case <-ticker.C:
			log.Println("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
			c.checkAllSites()
		}
	}
}

func (c *Checker) checkAllSites() {
	log.Println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
	
	rows, err := c.db.Query("SELECT id, url FROM sites")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: %v", err)
		return
	}
	defer rows.Close()

	sitesCount := 0
	for rows.Next() {
		var site models.Site
		if err := rows.Scan(&site.ID, &site.URL); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞: %v", err)
			continue
		}
		
		sitesCount++
		log.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç: %s (ID: %d)", site.URL, site.ID)
		
		result := c.checkSite(site.URL)
		c.updateSiteStatus(&site, result)
		c.saveCheckHistory(site.ID, result)
		
		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
		time.Sleep(500 * time.Millisecond)
	}
	
	log.Printf("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–∞–π—Ç–æ–≤: %d", sitesCount)
}

func (c *Checker) checkSite(siteURL string) CheckResult {
	log.Printf("üåê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É: %s", siteURL)
	start := time.Now()
	result := CheckResult{
		Status:     "down",
		StatusCode: 0,
		SSLValid:   false,
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è HTTPS —Å–∞–π—Ç–æ–≤
	if strings.HasPrefix(siteURL, "https://") {
		log.Printf("üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL –¥–ª—è: %s", siteURL)
		result.SSLValid, result.SSLExpiry = c.checkSSL(siteURL)
		if result.SSLValid {
			log.Printf("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è: %s", siteURL)
		} else {
			log.Printf("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –¥–ª—è: %s", siteURL)
		}
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	log.Printf("üì° –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫: %s", siteURL)
	resp, err := c.client.Get(siteURL)
	if err != nil {
		result.Error = err.Error()
		result.ResponseTime = time.Since(start).Milliseconds()
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ %s: %v (–≤—Ä–µ–º—è: %d–º—Å)", siteURL, err, result.ResponseTime)
		return result
	}
	defer resp.Body.Close()

	result.ResponseTime = time.Since(start).Milliseconds()
	result.StatusCode = resp.StatusCode

	// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
	body, err := io.ReadAll(resp.Body)
	if err == nil {
		result.ContentLength = int64(len(body))
		log.Printf("üìÑ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ %s: %d –±–∞–π—Ç", siteURL, result.ContentLength)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode >= 200 && resp.StatusCode < 400 {
		result.Status = "up"
		log.Printf("‚úÖ –°–∞–π—Ç %s –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: %d, –≤—Ä–µ–º—è: %d–º—Å, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç)", 
			siteURL, resp.StatusCode, result.ResponseTime, result.ContentLength)
	} else {
		result.Status = "down"
		result.Error = fmt.Sprintf("HTTP %d", resp.StatusCode)
		log.Printf("‚ùå –°–∞–π—Ç %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: %d, –≤—Ä–µ–º—è: %d–º—Å)", 
			siteURL, resp.StatusCode, result.ResponseTime)
	}

	return result
}

func (c *Checker) checkSSL(siteURL string) (bool, *time.Time) {
	u, err := url.Parse(siteURL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –¥–ª—è SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ %s: %v", siteURL, err)
		return false, nil
	}

	host := u.Host
	if !strings.Contains(host, ":") {
		host += ":443"
	}

	log.Printf("üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ %s –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL", host)
	
	conn, err := tls.DialWithDialer(
		&net.Dialer{Timeout: 10 * time.Second}, 
		"tcp", 
		host, 
		&tls.Config{ServerName: u.Hostname()})
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å %s: %v", host, err)
		return false, nil
	}
	defer conn.Close()

	certs := conn.ConnectionState().PeerCertificates
	if len(certs) == 0 {
		log.Printf("‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è %s", siteURL)
		return false, nil
	}

	cert := certs[0]
	now := time.Now()
	
	log.Printf("üîç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è %s: –≤—ã–¥–∞–Ω –¥–æ %v", siteURL, cert.NotAfter)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
	if now.After(cert.NotAfter) || now.Before(cert.NotBefore) {
		log.Printf("‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è %s –∏—Å—Ç–µ–∫ –∏–ª–∏ –µ—â–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", siteURL)
		return false, &cert.NotAfter
	}

	log.Printf("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è %s –≤–∞–ª–∏–¥–µ–Ω –¥–æ %v", siteURL, cert.NotAfter)
	return true, &cert.NotAfter
}

func (c *Checker) updateSiteStatus(site *models.Site, result CheckResult) {
	log.Printf("üíæ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ %s: %s", site.URL, result.Status)
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å
	query := `UPDATE sites SET 
                status = $1::varchar, 
                status_code = $2, 
                response_time = $3, 
                content_length = $4, 
                ssl_valid = $5, 
                ssl_expiry = $6, 
                last_error = $7, 
                last_checked = CURRENT_TIMESTAMP,
                total_checks = COALESCE(total_checks, 0) + 1,
                successful_checks = COALESCE(successful_checks, 0) + CASE WHEN $1::varchar = 'up' THEN 1 ELSE 0 END
              WHERE id = $8`

	_, err := c.db.Exec(query,
		result.Status,
		result.StatusCode,
		result.ResponseTime,
		result.ContentLength,
		result.SSLValid,
		result.SSLExpiry,
		result.Error,
		site.ID)

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ %s: %v", site.URL, err)
	} else {
		log.Printf("‚úÖ –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", site.URL)
	}
}

func (c *Checker) saveCheckHistory(siteID int, result CheckResult) {
	query := `INSERT INTO site_history (site_id, status, status_code, response_time, error, checked_at) 
              VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)`

	_, err := c.db.Exec(query, siteID, result.Status, result.StatusCode, result.ResponseTime, result.Error)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–∞–π—Ç–∞ ID %d: %v", siteID, err)
	} else {
		log.Printf("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Å–∞–π—Ç–∞ ID %d", siteID)
	}
}

func StartMonitoring(db *sql.DB, interval time.Duration) {
	checker := NewChecker(db, interval)
	checker.Start()
}