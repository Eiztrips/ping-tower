package main

import (
    "log"
    "net/http"
    "site-monitor/internal/config"
    "site-monitor/internal/database"
    "site-monitor/internal/handlers"
    "site-monitor/internal/monitor"
    "time"

    "github.com/gorilla/mux"
)

func main() {
    log.Println("üöÄ –ó–∞–ø—É—Å–∫ Site Monitor...")
    
    cfg, err := config.LoadConfig()
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
    }

    log.Printf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: DB=%s, Port=%s, Interval=%v", 
        cfg.DatabaseURL, cfg.ServerAddress, cfg.CheckInterval)

    db, err := database.NewDB(cfg.DatabaseURL)
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
    }
    defer db.Close()

    r := mux.NewRouter()
    handlers.RegisterRoutes(r, db)

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    time.Sleep(2 * time.Second)
    
    log.Printf("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º %v", cfg.CheckInterval)
    go monitor.StartMonitoring(db.DB, cfg.CheckInterval)
    
    log.Printf("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", cfg.ServerAddress)
    if err := http.ListenAndServe(cfg.ServerAddress, r); err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
    }
}