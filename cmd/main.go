package main

import (
    "log"
    "net/http"
    "site-monitor/internal/config"
    "site-monitor/internal/database"
    "site-monitor/internal/handlers"
    "site-monitor/internal/monitor"
    "site-monitor/internal/metrics"
    "time"

    "github.com/gorilla/mux"
)

func main() {
    log.Println("üöÄ –ó–∞–ø—É—Å–∫ Site Monitor...")
    
    cfg, err := config.LoadConfig()
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
    }

    log.Printf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: DB=%s, Port=%s", 
        cfg.DatabaseURL, cfg.ServerAddress)

    db, err := database.NewDB(cfg.DatabaseURL)
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
    }
    defer db.Close()

    var metricsService *metrics.Service
    if cfg.Metrics.Enabled {
        log.Println("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –¥–ª—è –º–µ—Ç—Ä–∏–∫...")

        metricsConfig := metrics.Config{
            ClickHouse: database.ClickHouseConfig{
                Host:     cfg.ClickHouse.Host,
                Port:     cfg.ClickHouse.Port,
                Database: cfg.ClickHouse.Database,
                Username: cfg.ClickHouse.Username,
                Password: cfg.ClickHouse.Password,
                Debug:    cfg.ClickHouse.Debug,
            },
            BatchSize:     cfg.Metrics.BatchSize,
            FlushInterval: cfg.Metrics.FlushInterval,
        }

        metricsService, err = metrics.NewService(metricsConfig, db)
        if err != nil {
            log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ClickHouse (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ—Ç—Ä–∏–∫): %v", err)
            metricsService = nil
        } else {
            defer metricsService.Close()
            log.Println("‚úÖ ClickHouse –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        }
    } else {
        log.Println("üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    }

    monitor.NotifySiteChecked = func(url string, result monitor.CheckResult) {
        handlers.BroadcastSSE("site_checked", map[string]interface{}{
            "url": url,
            "status": result.Status,
            "status_code": result.StatusCode,
            "response_time": result.ResponseTime,
			"ssl_valid": result.SSLValid,
            "timestamp": time.Now().Format(time.RFC3339),
        })
    }

    if metricsService != nil {
        monitor.MetricsRecorder = func(siteID int, siteURL string, result monitor.CheckResult, checkType string) {
            if err := metricsService.RecordCheckResult(siteID, siteURL, result, checkType); err != nil {
                log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: %v", err)
            }
        }
    }

    monitor.StartPeriodicMonitoring(db)

    r := mux.NewRouter()
    handlers.RegisterRoutes(r, db)

    if metricsService != nil {
        handlers.SetMetricsService(metricsService)
    }
    
    log.Printf("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", cfg.ServerAddress)
    log.Println("ÔøΩ –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏")
    
    if err := http.ListenAndServe(cfg.ServerAddress, r); err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
    }
}