package main

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "os"
    "os/signal"
    "site-monitor/internal/config"
    "site-monitor/internal/database"
    "site-monitor/internal/handlers"
    "site-monitor/internal/monitor"
    "site-monitor/internal/metrics"
    "site-monitor/internal/models"
    "site-monitor/internal/scheduler"
    "syscall"
    "time"

    "github.com/gorilla/mux"
)

func main() {
    log.Println("üöÄ –ó–∞–ø—É—Å–∫ Site Monitor —Å cron-–ø–æ–¥–æ–±–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
    
    cfg, err := config.LoadConfig()
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
    }

    log.Printf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: DB=%s, Port=%s", 
        cfg.DatabaseURL, cfg.ServerAddress)

    db, err := database.NewDB(cfg.DatabaseURL)
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
    }
    defer db.Close()

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –º–µ—Ç—Ä–∏–∫
    var metricsService *metrics.Service
    if cfg.Metrics.Enabled {
        log.Println("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –¥–ª—è –º–µ—Ç—Ä–∏–∫...")

        metricsConfig := metrics.Config{
            ClickHouse: database.ClickHouseConfig{
                Host:     cfg.ClickHouse.Host,
                Port:     cfg.ClickHouse.Port,
                Database: cfg.ClickHouse.Database,
                Username: cfg.ClickHouse.Username,
                Password: cfg.ClickHouse.Password,
                Debug:    cfg.ClickHouse.Debug,
            },
            BatchSize:     cfg.Metrics.BatchSize,
            FlushInterval: cfg.Metrics.FlushInterval,
        }

        metricsService, err = metrics.NewService(metricsConfig, db)
        if err != nil {
            log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ClickHouse (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ—Ç—Ä–∏–∫): %v", err)
            metricsService = nil
        } else {
            defer metricsService.Close()
            log.Println("‚úÖ ClickHouse –º–µ—Ç—Ä–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        }
    } else {
        log.Println("üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    cronScheduler := scheduler.NewCronScheduler()

    // –°–æ–∑–¥–∞–µ–º checker –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    checker := monitor.NewChecker(db, 0)

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    monitor.NotifySiteChecked = func(url string, result monitor.CheckResult) {
        handlers.BroadcastSSE("site_checked", map[string]interface{}{
            "url": url,
            "status": result.Status,
            "status_code": result.StatusCode,
            "response_time": result.ResponseTime,
			"ssl_valid": result.SSLValid,
            "timestamp": time.Now().Format(time.RFC3339),
            "check_type": "scheduled",
        })
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫
    if metricsService != nil {
        monitor.MetricsRecorder = func(siteID int, siteURL string, result monitor.CheckResult, checkType string) {
            if err := metricsService.RecordCheckResult(siteID, siteURL, result, checkType); err != nil {
                log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: %v", err)
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    globalSchedule := "*/5 * * * *" // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    err = cronScheduler.AddJob(
        "global_check", 
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤", 
        globalSchedule,
        createGlobalMonitoringJob(checker),
    )
    if err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: %v", err)
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    if err := setupSiteJobs(db, cronScheduler, checker); err != nil {
        log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–∞–π—Ç–æ–≤: %v", err)
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if err := cronScheduler.Start(); err != nil {
        log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: %v", err)
    }
    defer cronScheduler.Stop()

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    r := mux.NewRouter()
    handlers.RegisterRoutes(r, db)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
    r.HandleFunc("/api/scheduler/jobs", getSchedulerJobs(cronScheduler)).Methods("GET")
    r.HandleFunc("/api/scheduler/jobs/{id}/enable", enableJob(cronScheduler)).Methods("POST")
    r.HandleFunc("/api/scheduler/jobs/{id}/disable", disableJob(cronScheduler)).Methods("POST")
    r.HandleFunc("/api/scheduler/jobs/{id}/status", getJobStatus(cronScheduler)).Methods("GET")

    if metricsService != nil {
        handlers.SetMetricsService(metricsService)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    sigChan := make(chan os.Signal, 1)
    signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

    go func() {
        log.Printf("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", cfg.ServerAddress)
        log.Println("üïê Cron-–ø–æ–¥–æ–±–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω")
        
        if err := http.ListenAndServe(cfg.ServerAddress, r); err != nil {
            log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
        }
    }()

    // –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    <-sigChan
    log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
    
    cronScheduler.Stop()
    if metricsService != nil {
        metricsService.Close()
    }
    db.Close()
    
    log.Println("‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
}

// createGlobalMonitoringJob —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
func createGlobalMonitoringJob(checker *monitor.Checker) func() error {
    return func() error {
        return checker.CheckAllSitesScheduled()
    }
}

// createSiteMonitoringJob —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞
func createSiteMonitoringJob(siteID int, siteURL string, checker *monitor.Checker) func() error {
    return func() error {
        return checker.CheckSiteScheduled(siteID, siteURL)
    }
}

// setupSiteJobs –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
func setupSiteJobs(db *database.DB, cronScheduler *scheduler.CronScheduler, checker *monitor.Checker) error {
    log.Println("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–∞–π—Ç–æ–≤...")
    
    sites, err := db.GetAllSites()
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–π—Ç–æ–≤: %w", err)
    }

    for _, site := range sites {
        config, err := db.GetSiteConfig(site.ID)
        if err != nil {
            log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–∞–π—Ç–∞ %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", site.URL)
            config = &models.SiteConfig{
                SiteID: site.ID,
                CheckInterval: 300, // 5 –º–∏–Ω—É—Ç
                ScheduleEnabled: false,
                CronSchedule: "",
                Enabled: true,
            }
        }

        if !config.Enabled {
            log.Printf("‚è≠Ô∏è –°–∞–π—Ç %s –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", site.URL)
            continue
        }

        // –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule := config.GetEffectiveSchedule()
        jobID := fmt.Sprintf("site_%d", site.ID)
        jobName := fmt.Sprintf("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ %s", site.URL)

        err = cronScheduler.AddJob(
            jobID,
            jobName,
            schedule,
            createSiteMonitoringJob(site.ID, site.URL, checker),
        )
        
        if err != nil {
            log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–∞–π—Ç–∞ %s: %v", site.URL, err)
            continue
        }

        log.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ %s: %s (%s)", 
            site.URL, schedule, config.GetScheduleDescription())
    }

    return nil
}

// HTTP handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º

func getSchedulerJobs(cronScheduler *scheduler.CronScheduler) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        jobs := cronScheduler.GetJobs()
        
        result := make([]map[string]interface{}, 0)
        for _, job := range jobs {
            status := cronScheduler.GetJobStatus(job.ID)
            result = append(result, status)
        }

        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(map[string]interface{}{
            "jobs": result,
            "total": len(result),
        })
    }
}

func enableJob(cronScheduler *scheduler.CronScheduler) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        vars := mux.Vars(r)
        jobID := vars["id"]

        err := cronScheduler.EnableJob(jobID)
        if err != nil {
            http.Error(w, fmt.Sprintf(`{"error": "%s"}`, err.Error()), http.StatusNotFound)
            return
        }

        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(map[string]string{"status": "enabled"})
    }
}

func disableJob(cronScheduler *scheduler.CronScheduler) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        vars := mux.Vars(r)
        jobID := vars["id"]

        err := cronScheduler.DisableJob(jobID)
        if err != nil {
            http.Error(w, fmt.Sprintf(`{"error": "%s"}`, err.Error()), http.StatusNotFound)
            return
        }

        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(map[string]string{"status": "disabled"})
    }
}

func getJobStatus(cronScheduler *scheduler.CronScheduler) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        vars := mux.Vars(r)
        jobID := vars["id"]

        status := cronScheduler.GetJobStatus(jobID)
        
        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(status)
    }
}